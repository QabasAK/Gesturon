const int neutralLow = 310;   // Lower bound of neutral zone
const int neutralHigh = 350; // Upper bound of neutral zone
const int forwardThreshold = 360;  // Y-axis forward movement
const int backwardThreshold = 300; // Y-axis backward movement
const int leftThreshold = 300;     // X-axis left movement
const int rightThreshold = 360;    // X-axis right movement


void initialization();
unsigned int ATD_read(unsigned char port);
void ADC_Init();
void Delay_us(int us);
void Delay_ms(int ms);

void main() {
    initialization();
    ADC_Init();

    while (1) {
        int xVal = ATD_read(2);  // Read x-axis
        int yVal = ATD_read(1);  // Read y-axis

        // Neutral Zone Check
        if ((yVal >= 325 && yVal <= 335) && xVal <= 300) {
            PORTC = 0x01;  // Right
        }
        // Forward Check
        else if ((yVal >= 325 && yVal <= 335) && xVal >= 350) {
            PORTC = 0x02;  // Left
        }
        // Backward Check
        else if ((xVal >= 325 && xVal <= 335) && yVal >= 350) {
            PORTC = 0x04;  // Backward state
        }
        // Left Check
        else if ((xVal >= 325 && xVal <= 335) && yVal <= 300) {
            PORTC = 0x08;  // forward state
        }
        // Right Check
        else {
            PORTC = 0x10;  // Right state
        }

        Delay_ms(100);  // Delay for stability
    }
}

void initialization() {
    TRISA = 0xFF; //AN0 AN1 accelerometer (input)
    PORTA = 0x00;
    
    TRISB = 0x04; //RB2 push button (input) RB1 Vibration Motor (output)
    PORTB = 0x00;
    
    TRISC = 0x80;  // RC7 reciever (input) RC6 transmitter (output)
    PORTC = 0x00;
    
    TRISD = 0x00;  // All PORTD pins as output (if used)
    PORTD = 0x00;
    
    UART1_Init(38600);  // Initialize UART at 38600 baud rate
    Delay_ms(100);  // Allow UART stabilization
}

void ADC_Init() {
    ADCON1 = 0x80; // Right justify result, Vref = Vdd
    ADCON0 = 0x41; // ADC enabled, select AN0 (default), ADC ON
}

unsigned int ATD_read(unsigned char port) {
    ADCON0 = (ADCON0 & 0xC7) | (port << 3);  // Select ADC channel
    Delay_us(10);  // Allow acquisition time
    ADCON0 |= 0x04;  // Start conversion
    while (ADCON0 & 0x04);  // Wait for conversion to complete
    return ((ADRESH << 8) | ADRESL);  // Return 10-bit result
}
